Basic Aggregate Functions:

String Functions:

GROUP BY:

Joins:

Mastering full stack data analytics

Assignment Questions

Question 1:
Retrieve the total number of rentals made in the Sakila database.
Hint: Use the COUNT() function.
SELECT COUNT(*) AS total_rentals 
FROM rental;

Question 2:
Find the average rental duration (in days) of movies rented from the Sakila database.
Hint: Utilize the AVG() function.
SELECT COUNT(*) AS total_rentals 
FROM rental;

Question 3:
Display the first name and last name of customers in uppercase.
Hint: Use the UPPER () function.
SELECT UPPER(first_name) AS first_name_upper, 
       UPPER(last_name) AS last_name_upper 
FROM customer;

Question 4:
Extract the month from the rental date and display it alongside the rental ID.
Hint: Employ the MONTH() function.
SELECT rental_id, 
       MONTH(rental_date) AS rental_month 
FROM rental;


Question 5:
Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
Hint: Use COUNT () in conjunction with GROUP BY.
SELECT customer_id, 
       COUNT(*) AS rental_count 
FROM rental 
GROUP BY customer_id;

Question 6:
Find the total revenue generated by each store.
Hint: Combine SUM() and GROUP BY.
SELECT store_id, 
       SUM(amount) AS total_revenue 
FROM payment 
GROUP BY store_id;


Display the title of the movie, customer s first name, and last name who rented it.
Hint: Use JOIN between the film, inventory, rental, and customer tables.
SELECT f.title, 
       c.first_name, 
       c.last_name 
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id;


GROUP BY:

Joins:

Advanced Joins and GROUP BY:

Mastering full stack data analytics

Assignment Questions
Question 8:
Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
Hint: Use JOIN between the film actor, film, and actor tables.

Question 1:
Determine the total number of rentals for each category of movies.
Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.

Question 2:
Find the average rental rate of movies in each language.
Hint: JOIN film and language tables, then use AVG () and GROUP BY.
SELECT l.name AS language_name, 
       AVG(f.rental_rate) AS avg_rental_rate 
FROM language l
JOIN film f ON l.language_id = f.language_id
GROUP BY l.name;


Question 3:
Retrieve the customer names along with the total amount they've spent on rentals.
Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
SELECT c.first_name, 
       c.last_name, 
       SUM(p.amount) AS total_spent 
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;


Question 4:
List the titles of movies rented by each customer in a particular city (e.g., 'London').
Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.

Question 5:
Display the top 5 rented movies along with the number of times they've been rented.
Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.
SELECT f.title, 
       COUNT(*) AS rental_count 
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 5;


Question 6:
Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.
SELECT c.customer_id, 
       c.first_name, 
       c.last_name 
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
WHERE i.store_id IN (1, 2)
GROUP BY c.customer_id
HAVING COUNT(DISTINCT i.store_id) = 2;
